# Resolving Phantom Wallet Security Warnings for Solana dApps

Phantom wallet's security warnings for new domains like atechtools.org stem from **Blowfish's security engine**, which powers Phantom's transaction previews and domain verification. Here's a comprehensive guide to eliminate these warnings and establish domain trust.

## Understanding the warning system

Phantom's security warnings are generated by **Blowfish (review@blowfish.xyz)**, their third-party security provider. When users see "this is a new domain" or "unsafe" warnings, it's because your domain hasn't been verified in Blowfish's whitelist system. The warnings appear during wallet connection attempts and transaction signing, creating significant user friction for legitimate dApps.

**The core issue:** Phantom maintains an open-source blocklist at github.com/phantom/blocklist with over 2,000 malicious domains. New domains trigger warnings by default until they're manually reviewed and whitelisted. This security-first approach protects users but creates barriers for legitimate new projects.

## Primary resolution pathway: Blowfish verification

**The official solution is contacting review@blowfish.xyz** with a comprehensive domain verification request. This is the most direct path to eliminating security warnings entirely.

### Submission requirements
Send an email to **review@blowfish.xyz** with:
- Your domain URL (atechtools.org)
- GitHub repository with documented code
- Official social media accounts (Twitter, Discord)
- Detailed project description and purpose
- Security measures implemented (audits, best practices)
- Team information and company details

### Email template for Blowfish
```
Subject: Domain Whitelist Request - ATeachTools Token Creation Platform

Hello Blowfish Security Team,

We've developed a legitimate Solana token creation dApp at atechtools.org that's currently triggering security warnings in Phantom wallet. We'd like to request domain verification and whitelisting.

Domain: atechtools.org
GitHub: [your-repository-link]
Twitter: [official-account]
Project: Solana token creation platform with proper wallet integration
Security: [any audits, security practices implemented]

We're committed to user security and transparent development. Our platform uses @solana/wallet-adapter-react with proper transaction signing workflows. Please let us know if you need additional information.

Best regards,
[Your Name and Team]
```

**Response timeline:** Typically 1-2 weeks, though some developers report longer delays. The review process considers domain legitimacy, code quality, community presence, and security implementations.

## Technical configurations to support verification

Implementing proper security configurations strengthens your verification request and establishes technical trust signals that security systems recognize.

### Essential HTTPS and security headers
```javascript
// Express.js security headers configuration
app.use((req, res, next) => {
  res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');
  res.setHeader('Content-Security-Policy', "default-src 'self'; connect-src 'self' https: wss:; script-src 'self' 'unsafe-inline' https:;");
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
  next();
});
```

### Required website manifest files
Create `/.well-known/security.txt`:
```
Contact: security@atechtools.org
Expires: 2025-12-31T23:59:59.000Z
Canonical: https://atechtools.org/.well-known/security.txt
Policy: https://atechtools.org/security-policy
```

Create `/manifest.json` for PWA compliance:
```json
{
  "name": "ATeachTools Token Creator",
  "short_name": "ATeachTools",
  "description": "Secure Solana token creation platform",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ]
}
```

### Optimized wallet adapter configuration
Since you're already using @solana/wallet-adapter-react, enhance your configuration for better security:

```tsx
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { clusterApiUrl } from '@solana/web3.js';

const WalletConnectionProvider = ({ children }) => {
  const endpoint = useMemo(() => clusterApiUrl('mainnet-beta'), []);
  
  // Use empty array for wallet-standard auto-detection
  const wallets = useMemo(() => [], []);

  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletProvider wallets={wallets} autoConnect={true}>
        <WalletModalProvider>
          {children}
        </WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
};
```

## Current best practices for 2025

The Solana ecosystem has evolved specific standards that help establish domain trust with wallets.

### Digital Asset Links for mobile compatibility
For comprehensive wallet support, implement Digital Asset Links at `https://atechtools.org/.well-known/assetlinks.json`:
```json
[{
  "relation": ["delegate_permission/common.handle_all_urls"],
  "target": {
    "namespace": "web",
    "site": "https://atechtools.org"
  }
}]
```

### Sign In With Solana (SIWS) implementation
Implement SIWS for enhanced authentication security:
```javascript
const signInData = {
  domain: window.location.host,
  statement: "Sign in to authenticate wallet ownership for token creation",
  version: "1",
  nonce: crypto.randomUUID(),
  chainId: "mainnet",
  issuedAt: new Date().toISOString()
};
```

### Smart contract verification requirements
Ensure your token creation contracts are verified on Solscan or SolanaFM. Published, audited smart contracts significantly improve verification chances with Blowfish.

## Community verification and developer resources

Building community credibility accelerates the verification process significantly.

### Proven successful approaches
**Jupiter Exchange**, **Raydium**, and **Orca** all established trust through:
- **Active Solana Discord participation** in developer channels
- **Open-source development** with transparent GitHub repositories  
- **Security audits** from reputable firms like Trail of Bits
- **Community engagement** through Twitter, educational content
- **Partnership integrations** with established Solana protocols

### Developer community engagement
Join these key communities where Phantom and Blowfish team members are active:
- **Solana Discord** developer channels for technical support
- **GitHub discussions** on phantom/blocklist for domain issues
- **Twitter #SolanaDev** hashtag for ecosystem visibility
- **Stack Overflow** Solana tags for technical credibility

### Building social proof
- **Document your development process** publicly on GitHub
- **Engage with established Solana developers** for potential endorsements
- **Contribute to open-source Solana projects** to build ecosystem reputation
- **Share educational content** about token creation and DeFi security

## Alternative approaches while awaiting verification

Implement these strategies to reduce user friction during the verification process.

### Multi-wallet strategy reduces dependency
Support multiple Solana wallets to give users alternatives when Phantom shows warnings:
```tsx
// Support major Solana wallets
const wallets = useMemo(() => [
  // Auto-detect available wallets
], []);

// Alternative wallet providers beyond Phantom
// Solflare, Backpack, Glow typically have different warning systems
```

### User education and transparent communication
Create clear documentation explaining:
- **Why security warnings appear** for new domains
- **What steps you're taking** to resolve verification
- **How users can safely proceed** if they choose to continue
- **Your security measures** including any audits or reviews

### Progressive trust building
- **Start with testnet** deployment to build initial user base
- **Implement gradual feature rollout** rather than full launch
- **Display security credentials prominently** on your homepage
- **Maintain transparent development updates** on progress

### Technical workarounds for immediate relief
Some developers report that using **signAndSendTransaction** instead of separate connect/sign flows can reduce warning frequency, though this still requires user approval:

```javascript
// Alternative signing pattern that may reduce warnings
await phantom.solana.signAndSendTransaction(transaction);
```

## Implementation timeline and action plan

**Week 1 (Immediate actions):**
1. Submit verification request to review@blowfish.xyz with all required documentation
2. Implement security headers and HTTPS configurations
3. Create security.txt and manifest.json files
4. Set up multi-wallet support as fallback option

**Week 2-4 (While awaiting response):**
1. Build community presence in Solana Discord and Twitter
2. Publish detailed security documentation and development practices
3. Create user education materials explaining security warnings
4. Implement Digital Asset Links and SIWS authentication

**Ongoing (Long-term trust building):**
1. Maintain active community engagement and transparent communication
2. Consider security audit if budget allows
3. Build partnerships with other verified Solana projects
4. Monitor verification status and follow up with Blowfish team

The verification process typically succeeds when projects demonstrate **legitimate purpose**, **technical competence**, **community engagement**, and **security awareness**. Your existing wallet integration suggests you have the technical foundation â€“ focus on the community and security aspects to strengthen your verification request.